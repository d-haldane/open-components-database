#use-added-syntax(esir)
defpackage ocdb/passive-circuits:
  import core
  import collections
  import math
  import esir
  import esir/utils
  import esir/gen
  import ocdb/tests/default-harness
  import ocdb/generic-components
  import ocdb/generator-utils
  import ocdb/checks

public defn voltage-divider-calc (v-in:[Double,Double,Double], 
                                  v-out:[Double,Double,Double], 
                                  current:Double, 
                                  tol:Double) -> [Ref, Ref, Double, Double, Double] :
    val [v-min v v-max] = v-in
    val goal-r-hi = (v-min - v-out[1]) / current
    val goal-r-lo = v-out[1] / current
    val r-hi = gen-res-cmp(closest-std-val(goal-r-hi, tol), tol)
    val r-lo = gen-res-cmp(closest-std-val(goal-r-lo, tol), tol)

    ; CHECKS IN THIS SECTION WILL BE OFFLOADED TO SPICE
    ; =====================================================
    ; =====================================================
    ; Calculate DESIGN-TEMPERATURE dependent value of resistor  
    val lo-dr = (DESIGN-TEMPERATURE - 25.0) * property(r-lo.TCR)
    val hi-dr = (DESIGN-TEMPERATURE - 25.0) * property(r-hi.TCR)
    val r-lo-val = property(r-lo.resistance)
    val r-hi-val = property(r-hi.resistance)

    ; Calculate worst case.
    ; TCR can be + or - here. It's a tolerance, not an absolute change in resistance
    val vo-min = v-min * (r-lo-val * (1.0 - lo-dr)) * (1.0 - property(r-lo.tolerance)) 
                       / ( (r-lo-val * (1.0 - lo-dr)) * (1.0 - property(r-lo.tolerance)) 
                        + (r-hi-val  * (1.0 + hi-dr)) * (1.0 + property(r-hi.tolerance)))
    val vo-max = v-max * (r-lo-val * (1.0 + lo-dr)) * (1.0 + property(r-lo.tolerance)) 
                       / ( (r-lo-val * (1.0 + lo-dr)) * (1.0 + property(r-lo.tolerance)) 
                       + (r-hi-val  * (1.0 - hi-dr)) * (1.0 - property(r-hi.tolerance)) )
    val vo-nom = v * (r-lo-val) / ( (r-lo-val) + (r-hi-val) )
    ; =====================================================
    ; =====================================================

    ;Return computed achieved v-out
    [r-hi, r-lo, vo-min, vo-nom, vo-max]

; Generator function for voltage-divider module. This gets called at the top level
; Parameters
; ------------
; in : input pin, with annotated voltage [min nom max] (V)
; out : output pin. Gets annotated with [min nom max] (V)
; lo : low side pin (usually gnd)
; v-out : Allowable output voltage range [min nom max] (V)
; current : desired dc current of voltage divider (A) assumes output is connected to high-impedance.
; tol : desired tolerance of resistor
public defn make-voltage-divider (in:Ref, out:Ref, lo:Ref, 
                                  v-out:[Double,Double,Double], 
                                  current:Double, 
                                  tol:Double) :
  inside pcb-module :

    ; Find best resistors matching output requirement 
    val [r-hi-cmp, r-lo-cmp, vo-min, vo-nom, vo-max] = 
        voltage-divider-calc(property(in.voltage), v-out, current, tol)

    properties({out}) :
      voltage => [vo-min vo-nom vo-max]

    ; Instantiate resistors, create netlist
    unique inst r-hi : {r-hi-cmp}
    unique inst r-lo : {r-lo-cmp}
    net ({r-hi}.p[1] {in})
    net ({r-lo}.p[1] {r-hi}.p[2] {out})
    net ({r-lo}.p[2] {lo})

    ; Check true output against requirement
    check voltage-levels(out, v-out)

public defn make-voltage-divider (in:Ref, out:Ref, lo:Ref, 
                                  v-out:[Double,Double,Double], 
                                  current:Double) :
  ;Extract voltages from input pin
  val [v-min v v-max] = property(in.voltage)
  ; Look for highest acceptable tolerance in EIA standard values: [20% 10% 5% 2% 1% 0.5% 0.25% 0.1%]
  val tolerance = for tol in std-tols find :
    val [R1, R2, vo-min, vo-nom, vo-max] = 
         voltage-divider-calc(property(in.voltage), v-out, current, tol)
    (vo-min >= v-out[0]) and (vo-max <= v-out[2])
  
  ; If tolerance was found:
  if tolerance is Double :
    val tol = tolerance as Double
    make-voltage-divider(in, out, lo, v-out, current, tol) 
    ; println("Tolerance: %_" % [tol])

  else :
    fatal("Could not find acceptable tolerance for resistors in voltage divider.")


public defn make-voltage-divider (in:Ref, out:Ref, lo:Ref, v-out:[Double,Double,Double]) :
  ; Target current through divider is 10x input current (if known)
  if has-property?(out.i-input) :
    make-voltage-divider(in, out, lo, v-out, property(out.i-input) * 10.0)
  else :
  ; Otherwise, set current to be 1ma
    make-voltage-divider(in, out, lo, v-out, 1.0e-3)
    