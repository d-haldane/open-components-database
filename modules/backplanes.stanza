#use-added-syntax(esir)
defpackage ocdb/backplanes:
  import core
  import collections
  import math
  import esir
  import esir/utils
  import esir/gen
  import ocdb/tests/default-harness
  import ocdb/pinspec
  import ocdb/land-patterns
  import ocdb/generator-utils
  import ocdb/generic-components
  import ocdb/bundles
;[strip]
  import ocdb/symbols
  import ocdb/box-symbol
  import ocdb/rules
  import ocdb/stackups
;[/strip]

public pcb-design VITA57-1-FMC-single (main-module:Ref) :
  unique pcb-module temp-module :
    inst instance : {main-module}
    package(instance) at loc(0.0, 0.0) on Top
    package(instance.fmc) at loc(-26.65, 0.0, 90.0) on Top
  module = {temp-module}
;[strip]
  unique pcb-board B :
    stackup = sierra-circuits-6-layer-62-mil
    boundary = Rectangle(73.3, 69.0)
    signal-boundary = Rectangle(73.3, 69.0)
  board = {B}
  rules = sierra-adv-rules
;[/strip]

public pcb-design VITA46-10-RTM-6U (main-module:Ref) :
  unique pcb-module temp-module :
    inst instance : {main-module}
    package(instance) at loc(0.0, 0.0) on Top
    val [dx dy] = [(10.25 - 81.5 / 2.0), (233.35 / 2.0 - 7.65)]
    unique inst h0 : {mounting-hole-cmp(1.5)}[3]
    unique inst h1 : {mounting-hole-cmp(2.325)}[3]
    package({h0}[0]) at loc(dx, dy) on Top
    package({h0}[1]) at loc(dx, dy - 84.7) on Top
    package({h0}[2]) at loc(dx, dy - 218.05) on Top
    package({h1}[0]) at loc(dx - 5.5 , dy) on Top
    package({h1}[1]) at loc(dx - 5.5 , dy - 84.7) on Top
    package({h1}[2]) at loc(dx - 5.5 , dy - 218.05) on Top
    package(instance.backplane) at loc(-35.2, 89.55, -90.0) on Top
  module = {temp-module}
;[strip]
  unique pcb-board B :
    stackup = sierra-circuits-6-layer-62-mil
    boundary = Rectangle(81.5, 233.35)
    signal-boundary = Rectangle(81.5, 233.35)
  board = {B}
  rules = sierra-adv-rules
;[/strip]

public pcb-module vpx-6u :
  port vpx-power : power[6]
  port vpx-pairs : diff-pair[6][32]
  port vpx-sig : pin[6][8]
  port P0-sig : pin[16]
  port P0-pairs : diff-pair[4]
  pin gnd
  inst P0 : {ocdb/te-connectivity/2102772-1/component}
  inst P : {ocdb/te-connectivity/2102771-1/component}[6]
  package(P[0]) at loc(0.0, 0.0) on Top
  package(P[1]) at loc(28.8, 0.0) on Top
  package(P0) at loc(21.73 + 28.8, 0.0) on Top
  for i in 2 to 6 do : package(P[i]) at loc(to-double(i + 1) * 28.8, 0.0) on Top

  properties(vpx-pairs) :
    external => true

  defn vpx-map (r:Int, c:Int, con:Int) :
    val name = Ref(red-alph-letter(r))[c + 1]
    if c % 2 == 1 :
      if r % 3 == 1 :
        net (P[con].{name}, vpx-pairs[con][2 * c + (r / 3)].P)
      else if r % 3 == 2 :
        net (P[con].{name}, vpx-pairs[con][2 * c + (r / 3)].N)
      else :
        net (P[con].{name}, gnd)
    else :
      if r == 6 :
        if c % 2 == 0 :
          net (P[con].{name}, vpx-sig[con][c / 2])
      else :
        if r % 3 == 0 :
          net (P[con].{name}, vpx-pairs[con][2 * c + (r / 3)].P)
        else if r % 3 == 1 :
          net (P[con].{name}, vpx-pairs[con][2 * c + (r / 3)].N)
        else :
          net (P[con].{name}, gnd)
    []

  for i in 0 to 6 do :
    for c in 0 to 16 do :
      for r in 0 to 7 do :
        vpx-map(r,c,i)

  val sig-seq = to-seq(0 to 16)

  defn P0-map (r:Int, c:Int) :
    val name = Ref(red-alph-letter(r))[c + 1]
    if c < 3 :
      if r % 4 == 0 :
        net (vpx-power[2 * c + (r / 4)].vdd, P0.{name})
        net (vpx-power[2 * c + (r / 4)].gnd, gnd)
      if r % 4 == 1 :
        net (vpx-power[2 * c + (r / 4)].vdd, P0.{name})
      if r % 4 == 2 :
        net (vpx-power[2 * c + (r / 4)].vdd, P0.{name})
    else if c < 6 : 
      if (r == 2 or r == 4) :
        net (P0.{name}, gnd)
      else :
        net (P0.{name}, P0-sig[next(sig-seq)])
    else if c == 6 :
      if r == 6 :
        net (P0.{name}, P0-sig[next(sig-seq)])
      else :
        if r % 3 == 0 :
          net (P0.{name}, P0-pairs[0 + (r / 3)].P)
        else if r % 3 == 1 :
          net (P0.{name}, P0-pairs[0 + (r / 3)].N)
        else :
          net (P0.{name}, gnd) 
    else if c == 7 :
      if r % 3 == 1 :
        net (P0.{name}, P0-pairs[2 + (r / 3)].P)
      else if r % 3 == 2 :
        net (P0.{name}, P0-pairs[2 + (r / 3)].N)
      else :
        net (P0.{name}, gnd)
    []

  for c in 0 to 8 do :
    for r in 0 to 7 do :
      P0-map(r,c)

  for i in 0 to 6 do :
    for j in 0 to 32 do :
      supports lvds :
        N => vpx-pairs[i][j].N
        P => vpx-pairs[i][j].P

  for i in 0 to 6 do :
    for j in 0 to 8 do :
      supports gpio :
        gpio => vpx-sig[i][j]