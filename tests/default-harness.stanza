#use-added-syntax(esir)
defpackage ocdb/tests/default-harness :
  import core
  import collections
  import esir
  import esir/gen
  
;[strip]
;============================================================
;=================== Default Materials ======================
;============================================================

public pcb-material copper-default :
  type = conductor
  name = "Copper"
  
public pcb-material core-default :
  type = dielectric
  dielectric-coefficient = 4.26
  name = "PR4 Core"

public pcb-material prepreg-default :
  type = dielectric
  dielectric-coefficient = 4.26
  name = "PR4 Prepreg 2113/2116"

public pcb-material soldermask-default :
  type = dielectric
  dielectric-coefficient = 3.9
  name = "Taiyo BSN4000"

;============================================================
;============== Default Stackup, Rules, Board ===============
;============================================================

public pcb-stackup default-stackup (num-layers:Int) :
  name = "Default stackup"
  layer(2.03e-2, soldermask-default)
  for i in 0 to num-layers do :
    layer(1.498e-1, prepreg-default) when i > 0
    layer(5.08e-2, copper-default)  
  layer(2.03e-2, soldermask-default)   

public pcb-rules default-rules :
  min-copper-width = 0.0635 ; 2.5mil
  min-copper-copper-space = 0.0635 ; 2.5mil
  min-copper-hole-space = 0.1524 ; 6mil (guess)
  min-copper-edge-space = 0.254 ; 10mil
  min-annular-ring = 0.0765 ; 3mil 
  min-drill-diameter = 0.1525 ; 6mil
  min-silkscreen-width = 0.1016 ; 4mil
  min-pitch-leaded = 0.35
  min-pitch-bga = 0.35 ; guess
  max-board-width = 406.4 ; 16in
  max-board-height = 558.8 ; 22in

public pcb-board default-board (num-layers:Int, width:Double, height:Double) :
  stackup = {default-stackup(num-layers)}
  boundary = Rectangle(width, height)
  signal-boundary = Rectangle(width, height)

public defn default-board (module:Ref, num-layers:Int, width:Double, height:Double) :
  val brd-outline = Rectangle(width, height) 

  pcb-board B :
    stackup = {default-stackup(num-layers)}
    boundary = brd-outline 
    signal-boundary = brd-outline

  unique pcb-design main-design :
    module = {module}
    board = B
    rules = {ocdb/rules/sierra-adv-rules}
  main-design
;[/strip]

;============================================================
;================= Single Module Design =====================
;============================================================

;[strip]
public defn single-module-design (module:Ref, board:Ref) :
  unique pcb-module main-module :
    inst instance : {module}
    package(instance) at loc(0.0,0.0) on Top
  unique pcb-design main-design :
    module = {main-module}
    rules = default-rules
    board = {board}
  main-design

public defn single-module-design (module:Ref) :
  single-module-design(module, default-board(4, 10.0, 10.0))
  
;[replace]
;public defn single-module-design (module:Ref) :
;  unique pcb-module main-module :
;    inst instance : {module}
;    package(instance) at loc(0.0,0.0) on Top
;  unique pcb-design main-design :
;    module = {main-module}
;  main-design
;[/strip]