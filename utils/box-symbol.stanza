#use-added-syntax(esir)
defpackage ocdb/box-symbol :
  import core
  import collections
  import esir
  import esir/gen
  import esir/fonts
  import esir/utils

;============================================================
;========== Definition of a Parameterized Box Symbol ========
;============================================================

public defn box-symbol (input-width:Double, input-height:Double,
                        num-left:Int, num-right:Int, num-top:Int, num-bottom:Int) :
  ;Snapping behaviour
  defn snap-grid-up (x:Double, units:Double) :
    val spacing = grid(units)
    math/ceil(x / spacing) * spacing

  ;Snap up width and height
  val width = snap-grid-up(input-width, 1.0)
  val height = snap-grid-up(input-height, 1.0)  
  raw-box-symbol(width, height, num-left, num-right, num-top, num-bottom)

;------------------------------------------------------------
;----------- Raw Symbol Definition of a Box Symbol ----------
;------------------------------------------------------------

pcb-symbol raw-box-symbol (width:Double, height:Double,
                           num-left:Int, num-right:Int, num-top:Int, num-bottom:Int) :
  ;Snapping behaviour
  defn snap-grid-up (x:Double, units:Double) :
    val spacing = grid(units)
    math/ceil(x / spacing) * spacing

  defn snap-grid-down (x:Double, units:Double) :
    val spacing = grid(units)
    math/floor(x / spacing) * spacing

  ;Bounds of rectangle
  val left-x = (- width / 2.0)
  val right-x = width / 2.0
  val top-y = height / 2.0
  val bottom-y = (- height / 2.0)

  ;Spacing between pins
  val spacing = grid(1.0)

  ;Reference and Value labels
  val left-x-grid = snap-grid-down(left-x, 0.5)
  val top-y-grid = snap-grid-up(top-y, 0.5)
  layer("foreground") = Text(">VALUE", 0.762, SW, loc(left-x-grid, top-y-grid + 0.3))
  layer("foreground") = Text(">REF", 0.762, SW, loc(left-x-grid, top-y-grid + 0.3 + 0.762 + 0.3))

  ;Left pins
  let :
    val height-of-pins = to-double(num-left - 1) * spacing
    val start-y = snap-grid-up(height-of-pins / 2.0, 0.5)
    for i in 0 to num-left do :
      val pin-y = start-y - to-double(i) * spacing
      pin L[i] at Point(left-x, pin-y) with :
        direction = Left
        length = grid(1.0)
        number-size = 0.762
        name-size = 0.762
        
  ;Right pins
  let :
    val height-of-pins = to-double(num-right - 1) * spacing
    val start-y = snap-grid-up(height-of-pins / 2.0, 0.5)
    for i in 0 to num-right do :
      val pin-y = start-y - to-double(i) * spacing
      pin R[i] at Point(right-x, pin-y) with :
        direction = Right
        length = grid(1.0)
        number-size = 0.762
        name-size = 0.762
        
  ;Top pins
  let :
    val width-of-pins = to-double(num-top - 1) * spacing
    val start-x = snap-grid-down(width-of-pins / -2.0, 0.5)
    for i in 0 to num-top do :
      val pin-x = start-x + to-double(i) * spacing
      pin T[i] at Point(pin-x, top-y) with :
        direction = Up
        length = grid(1.0)
        number-size = 0.762
        name-size = 0.762

  ;Bottom pins
  let :
    val width-of-pins = to-double(num-bottom - 1) * spacing
    val start-x = snap-grid-down(width-of-pins / -2.0, 0.5)
    for i in 0 to num-bottom do :
      val pin-x = start-x + to-double(i) * spacing
      pin B[i] at Point(pin-x, bottom-y) with :
        direction = Down
        length = grid(1.0)
        number-size = 0.762
        name-size = 0.762  

  ;Rectangle
  layer("foreground") = Rectangle(width, height)

defn grid (units:Double) :
  units * 2.54

;======================================================================
;=== Algorithm for Generating a Box Symbol Given Pin Specifications ===
;======================================================================

defn generate-box-symbol-unit (entries:Seqable<KeyValue<Dir,Ref|Seqable>>) -> [Ref, Vector<KeyValue<Ref,Ref>>] :
  ;Pitch between pins
  val spacing = grid(1.0)

  ;Snapping behaviour
  defn snap-grid-up (x:Double) :
    math/ceil(x / spacing) * spacing

  defn snap-grid-down (x:Double) :
    math/floor(x / spacing) * spacing
    
  ;Collect all entries
  val all-entries = Vector<KeyValue<Dir,Ref>>()
  for e in entries do :
    val dir = key(e)
    let scan (r:? = value(e)) :
      match(r) :
        (r:Ref) :
          add(all-entries, dir => r)
        (r:Seqable) :
          do(scan,r)
        (r) :
          fatal("The given entry %_ => %_ is not valid. The value must be a Ref or a sequence of Refs." % [dir, r])

  ;Retrieve entries
  defn get-entries (dir:Dir) :
    to-tuple(filter({key(_) == dir}, all-entries))
  defn num-entries (dir:Dir) :
    count({key(_) == dir}, all-entries)

  ;Compute required dimensions of box
  ;Returns [total-pitch, text-length]
  defn pin-dimensions (dir:Dir) -> [Double, Double] :
    val es = get-entries(dir)
    val n = length(es)
    val total-pitch = max(0.0, snap-grid-up(grid(1.0) * to-double(n - 1)))
    defn text-length (r:Ref) :
      val string = to-string(flatten(KicadFlattener(), r))
      kicad-string-length(string, 0.762) + grid(0.5)
    val length = maximum(0.0, seq(text-length{value(_)}, es))
    [total-pitch, length]

  val [Lp, Ll] = pin-dimensions(Left)
  val [Rp, Rl] = pin-dimensions(Right)
  val [Tp, Tl] = pin-dimensions(Up)
  val [Bp, Bl] = pin-dimensions(Down)
  val mpnl = match(mpn(self)) :
               (mpn:String) : kicad-string-length(mpn, 0.762)
               (f:False) : 0.0
               
  ;Compute total width and height
  val pad = grid(1.0)
  val mpn-pad = max(mpnl + 2.0, pad)
  val width =
    if Tp == 0.0 :
      max(mpnl,
      max(Ll + Rl + pad,
          max(Tp, Bp) + 2.0 * pad))
    else :
      max(Ll + Rl + pad,
          max(Tp, Bp) + 2.0 * mpn-pad)
  val height = max(Lp, Rp) + 2.0 * (max(Tl, Bl) + pad)

  ;Retrieve reference for symbol
  val box-ref = box-symbol(width, height,
                           num-entries(Left),
                           num-entries(Right),
                           num-entries(Up),
                           num-entries(Down))
  
  ;Create pin mappings
  val pin-mappings = Vector<KeyValue<Ref,Ref>>()
  defn assign-pins (dir:Dir, sympin:Ref) :
    for (e in get-entries(dir), i in 0 to false) do :
      add(pin-mappings, value(e) => sympin[i])
  assign-pins(Left, #R(L))
  assign-pins(Right, #R(R))
  assign-pins(Up, #R(T))
  assign-pins(Down, #R(B))  

  ;Return reference and mappings
  [box-ref, pin-mappings]

public defn make-box-symbol (entries:Seqable<KeyValue<Dir, Ref|Seqable>>) :
  val [ref, mapping] = generate-box-symbol-unit(entries)
  inside pcb-component :
    symbol = {ref}(
      for e in mapping do :
        {key(e)} => {value(e)})

public defstruct BoxBank :
  entries: Collection<KeyValue<Dir,Ref|Seqable>>

public defn make-box-symbol (banks:Seqable<BoxBank>) :
  inside pcb-component :
    symbol :
      for (bank in banks, u in 0 to false) do :
        val [ref, mapping] = generate-box-symbol-unit(entries(bank))
        unit(u) = {ref}(
          for e in mapping do :
            {key(e)} => {value(e)})

;============================================================
;========== Definition of a D-Sub Box Symbol ================
;============================================================


;TODO port to new box symbol
; public pcb-symbol d-sub-sym (
;   spec: PinSpec
; ) :
;   val bpl = resolve-pin-locs(spec)
  
;   place-box-pins(bpl)

;   val h2 = box-h(bpl) / 2.0 + 0.5
;   val h2d = h2 - 0.75
;   val w2 = box-w(bpl) / 2.0

;   unit-polygon(`foreground, [
;     [(- w2), h2]
;     [(- w2), (- h2)]
;     [w2, (- h2d)]
;     [w2, (h2d)]
;   ])

;   place-ref-val(bpl)