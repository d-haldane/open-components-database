defpackage ocdb/standalone-generator :
  import core
  import collections
  import math
  import rtm/ir
  import rtm/ir-gen
  import rtm/ir-connections
  import rtm/ir-utils
  import interfaces
  import components
  import connections
  import modules
  import footprints
  import ocdb/symbols
  import parts
  import power-system-gen
  import jitpcb/powergen 
  import modulegen
  import xcku060-cmp
;[strip]
  import ocdb/stackups
  import fonts
  import ocdb/rules
  import peripherals
;[strip]

#use-added-syntax(ir-gen)
jitpcb/repl-lib/clear-user-statements()
;==== Parts ===================================================================
;==== Packages ===================================================================
;==== Components ===================================================================
;==== Modules ===================================================================


;==== Main Module ===================================================================
val brd-outline = rectangle(100.0, 100.0) 
pcb-module template :
 
;[strip]
;==== Board ====================================================================

defn make-template-board () :
  
  pcb-board B :
    stackup = bay-area-circuits-4-layer-62-mil 
    boundary = brd-outline
    signal-boundary = brd-outline

  make-board(template) :
    board = B
    rules = bay-area-circuits-conservative-rules
;[strip]

;==== Schematic ================================================================

defn make-template-schematic () :
  make-schematic(template)

;==== Project ==================================================================

defn make-template-project () :
  make-template-schematic()
;[strip]
  make-template-board()
;[strip]

make-template-project()
  
jitpcb/repl-lib/dump-esir("template", [`prune-lower])

